<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gwf.mybatis.mapper.EmployeeMapperDynamicSQL">

	<!--
		• if:判断
		• choose (when, otherwise):分支选择；带了break的swtich-case
			如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
		• trim 字符串截取(where(封装查询条件), set(封装修改条件))
		• foreach 遍历集合
	-->

	<!-- 查询员工，要求携带什么条件就依什么条件查询 -->
	<!-- List<Employee> getEmpsConditionIf(Employee employee); -->
	<select id="getEmpsConditionIf" resultType="employee">
		select *
		from tbl_employee
		<where>
			<!-- test：判断表达式（OGNL）
				OGNL参照PPT或者官方文档。
					   c:if  test
				从参数中取值进行判断

				遇见特殊符号应该去写转义字符：
				&&：
			-->
			<if test="id!=null">
				id=#{id}
			</if>
			<if test="lastName !=null and lastName !=''">
				and last_name like #{lastName}
			</if>
			<if test="email !=null and email.trim() !=''">
				and email = #{email}
			</if>
			<if test="gender == 0 or  gender == 1">
				and gender = #{gender}
			</if>
		</where>
	</select>

	<!-- List<Employee> getEmpsConditionTrim(Employee employee); -->
	<select id="getEmpsConditionTrim" resultType="employee" parameterType="employee">
		select * from tbl_employee
		<!--
			后面多出的and或者or where标签不能解决

			prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
					prefix给拼串后的整个字符串加一个前缀
			prefixOverrides="":
					前缀覆盖： 去掉整个字符串前面多余的字符
			suffix="":后缀
					suffix给拼串后的整个字符串加一个后缀
			suffixOverrides=""
					后缀覆盖：去掉整个字符串后面多余的字符

		-->
		<trim prefix="WHERE" suffixOverrides="AND">
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName !=null and lastName !=''">
				last_name like #{lastName} and
			</if>
			<if test="email !=null and email.trim() !=''">
				email = #{email} and
			</if>
			<!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
			<if test="gender == 0 or  gender == 1">
				gender = #{gender}
			</if>
		</trim>
	</select>

	<!-- List<Employee> getEmpsConditionChoose(Employee employee); -->
	<select id="getEmpsConditionChoose" resultType="employee" parameterType="employee">
		select * from tbl_employee
		<!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
		<where>
			<choose>
				<when test="id!=null ">
					id=#{id}
				</when>
				<when test="lastName!=null ">
					last_name like #{lastName}
				</when>
				<when test="email!=null ">
					email = #{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>


	<!-- void updateEmployee(Employee employee); -->
	<update id="updateEmployee" parameterType="employee">
		<!-- Set标签的使用 -->
		<!--
			update tbl_employee
			<set>
				<if test="lastName!=null">
					last_name=#{lastName},
				</if>
				<if test="email!=null">
					email=#{email},
				</if>
				<if test="gender!=null">
					gender=#{gender}
				</if>
			</set>
			where id=#{id}
		-->
		<!-- trim 标签的使用 -->
		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender},
			</if>
		</trim>
		where id=#{id}

	</update>

	<!-- 批量查询 -->
	<!-- List<Employee> getEmpsConditionForEach(List<Integer> ids); -->
	<select id="getEmpsConditionForEach" resultType="employee">
		select * from tbl_employee
		<foreach collection="ids" item="item_id" separator="," open="where id in(" close=")">

			<!--
				collection：指定要遍历的集合：
					list类型的参数会特殊处理封装在map中，map的key就叫list
					item：将当前遍历出的元素赋值给指定的变量
					separator:每个元素之间的分隔符
					open：遍历出所有结果拼接一个开始的字符
					close:遍历出所有结果拼接一个结束的字符
					index:索引。遍历list的时候是index就是索引，item就是当前值
							  遍历map的时候index表示的就是map的key，item就是map的值

				#{变量名}就能取出变量的值也就是当前遍历出的元素
			-->

			#{item_id}
		</foreach>
	</select>

	<!-- 批量保存 -->
	<!-- void addEmps(@Param("emps")List<Employee> emps); -->
	<!-- MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法 -->
	<!--
		<insert id="addEmps">
		insert into tbl_employee(last_name, email, gender, d_id) values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>
	-->

	<insert id="addEmps">
		<!-- 也可以发出多条插入语句，但效率低下 -->
		<foreach collection="emps" item="emp" separator=";">
			insert into tbl_employee(last_name, email, gender, d_id)
			values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>

	<!--
		抽取可重用的sql片段。方便后面引用
		1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
		2、include来引用已经抽取的sql：
		3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
				include-property：取值的正确方式${prop},
				#{不能使用这种方式}
	-->
	<sql id="insertColumn">
		<if test="_databaseId=='oracle'">
			employee_id,last_name,email
		</if>
		<if test="_databaseId=='mysql'">
			last_name,email,gender,d_id
		</if>
	</sql>
</mapper>
